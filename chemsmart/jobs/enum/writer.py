import logging
from typing import Optional

from chemsmart.jobs.writer import InputWriter
from chemsmart.io.molecules.structure import Molecule

logger = logging.getLogger(__name__)

class EnumWriter(InputWriter):
    """Writer class for enumeration that reads files and converts to Molecule objects."""

    def __init__(self, job, **kwargs):
        # EnumJob 没有 settings，所以重写初始化
        self.job = job
        self.settings = None  # EnumJob 不使用 settings
        self.molecule = None

    def write(self, **kwargs):
        """Convert job's molecule to RDKit molblock."""
        # 直接使用job中已经加载的molecule
        if not hasattr(self.job, 'molecule') or self.job.molecule is None:
            raise ValueError("No molecule available in EnumJob")
        
        self.molecule = self.job.molecule
        logger.info(f"Using molecule from job: {self.molecule}")
        
        # 转换为RDKit molblock
        molblock = self._convert_to_molblock()
        logger.info("Successfully converted molecule to RDKit molblock")
        
        # 打印molblock并终止程序
        print("=" * 60)
        print("MOLBLOCK OUTPUT:")
        print("=" * 60)
        print(molblock)
        print("=" * 60)
        print("Conversion successful! Exiting for testing...")
        exit(0)
        
        return molblock
    
    def _convert_to_molblock(self):
        """Convert molecule to RDKit molblock format."""
        try:
            logger.info("Converting molecule to RDKit object...")
            rdkit_mol = self.molecule.to_rdkit()
            logger.info(f"Successfully created RDKit molecule: {rdkit_mol}")
            
            # 尝试解决芳香性问题
            try:
                # 清除芳香性标记并重新感知
                from rdkit import Chem
                Chem.Kekulize(rdkit_mol, clearAromaticFlags=True)
                logger.info("Successfully kekulized molecule")
            except Exception as kek_e:
                logger.warning(f"Kekulization failed: {kek_e}, trying to sanitize...")
                # 如果Kekulize失败，尝试重新清理分子
                try:
                    from rdkit import Chem
                    rdkit_mol = Chem.RemoveHs(rdkit_mol)
                    Chem.SanitizeMol(rdkit_mol)
                    logger.info("Successfully sanitized molecule")
                except Exception as san_e:
                    logger.warning(f"Sanitization also failed: {san_e}, using original molecule")
            
            # 生成molblock
            from rdkit import Chem
            molblock = Chem.MolToMolBlock(rdkit_mol)
            logger.info("Successfully generated molblock")
            return molblock
            
        except Exception as e:
            logger.error(f"Failed to convert molecule to molblock: {e}")
            
            # 备用方案：输出分子的基本信息
            try:
                logger.info("Trying fallback method to show molecule info...")
                # 检查可用的属性
                logger.info(f"Molecule attributes: {dir(self.molecule)}")
                logger.info(f"Molecule symbols: {getattr(self.molecule, 'symbols', 'Not available')}")
                logger.info(f"Molecule positions: {getattr(self.molecule, 'positions', 'Not available')}")
                
                # 尝试使用 positions 和 symbols
                if hasattr(self.molecule, 'positions') and hasattr(self.molecule, 'symbols'):
                    coords = self.molecule.positions
                    symbols = self.molecule.symbols
                    
                    # 创建简单的molblock
                    molblock_lines = ["", "  Generated by ChemSmart", ""]
                    molblock_lines.append(f"{len(symbols):3d}{0:3d}  0  0  0  0  0  0  0  0999 V2000")
                    
                    # 添加原子坐标
                    for i, (symbol, coord) in enumerate(zip(symbols, coords)):
                        line = f"{coord[0]:10.4f}{coord[1]:10.4f}{coord[2]:10.4f} {symbol:<2s} 0  0  0  0  0  0  0  0  0  0  0  0"
                        molblock_lines.append(line)
                    
                    molblock_lines.append("M  END")
                    fallback_molblock = "\n".join(molblock_lines)
                    logger.info("Successfully created fallback molblock")
                    return fallback_molblock
                else:
                    logger.error("No suitable coordinate data found")
                    # 至少输出分子的基本信息
                    return f"Molecule: {self.molecule}\nError: {e}"
                
            except Exception as fallback_e:
                logger.error(f"Fallback method also failed: {fallback_e}")
                return f"Molecule: {self.molecule}\nConversion failed: {e}\nFallback failed: {fallback_e}"
